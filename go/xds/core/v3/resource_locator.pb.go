// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: xds/core/v3/resource_locator.proto

package v3

import (
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceLocator_Scheme int32

const (
	ResourceLocator_XDSTP ResourceLocator_Scheme = 0
	ResourceLocator_HTTP  ResourceLocator_Scheme = 1
	ResourceLocator_FILE  ResourceLocator_Scheme = 2
)

// Enum value maps for ResourceLocator_Scheme.
var (
	ResourceLocator_Scheme_name = map[int32]string{
		0: "XDSTP",
		1: "HTTP",
		2: "FILE",
	}
	ResourceLocator_Scheme_value = map[string]int32{
		"XDSTP": 0,
		"HTTP":  1,
		"FILE":  2,
	}
)

func (x ResourceLocator_Scheme) Enum() *ResourceLocator_Scheme {
	p := new(ResourceLocator_Scheme)
	*p = x
	return p
}

func (x ResourceLocator_Scheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceLocator_Scheme) Descriptor() protoreflect.EnumDescriptor {
	return file_xds_core_v3_resource_locator_proto_enumTypes[0].Descriptor()
}

func (ResourceLocator_Scheme) Type() protoreflect.EnumType {
	return &file_xds_core_v3_resource_locator_proto_enumTypes[0]
}

func (x ResourceLocator_Scheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceLocator_Scheme.Descriptor instead.
func (ResourceLocator_Scheme) EnumDescriptor() ([]byte, []int) {
	return file_xds_core_v3_resource_locator_proto_rawDescGZIP(), []int{0, 0}
}

// xDS resource locators identify a xDS resource name and instruct the
// data-plane load balancer on how the resource may be located.
//
// Resource locators have a canonical xdstp:// URI representation:
//
//   xdstp://{authority}/{type_url}/{id}?{context_params}{#directive,*}
//
// where context_params take the form of URI query parameters.
//
// Resource locators have a similar canonical http:// URI representation:
//
//   http://{authority}/{type_url}/{id}?{context_params}{#directive,*}
//
// Resource locators also have a simplified file:// URI representation:
//
//   file:///{id}{#directive,*}
//
type ResourceLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI scheme.
	Scheme ResourceLocator_Scheme `protobuf:"varint,1,opt,name=scheme,proto3,enum=xds.core.v3.ResourceLocator_Scheme" json:"scheme,omitempty"`
	// Opaque identifier for the resource. Any '/' will not be escaped during URI
	// encoding and will form part of the URI path. This may end
	// with ‘*’ for glob collection references.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Logical authority for resource (not necessarily transport network address).
	// Authorities are opaque in the xDS API, data-plane load balancers will map
	// them to concrete network transports such as an xDS management server, e.g.
	// via envoy.config.core.v3.ConfigSource.
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// Fully qualified resource type (as in type URL without types.googleapis.com/
	// prefix).
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Types that are assignable to ContextParamSpecifier:
	//
	//	*ResourceLocator_ExactContext
	ContextParamSpecifier isResourceLocator_ContextParamSpecifier `protobuf_oneof:"context_param_specifier"`
	// A list of directives that appear in the xDS resource locator #fragment.
	//
	// When encoding to URI form, directives are percent encoded with comma
	// separation.
	Directives []*ResourceLocator_Directive `protobuf:"bytes,6,rep,name=directives,proto3" json:"directives,omitempty"`
}

func (x *ResourceLocator) Reset() {
	*x = ResourceLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xds_core_v3_resource_locator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLocator) ProtoMessage() {}

func (x *ResourceLocator) ProtoReflect() protoreflect.Message {
	mi := &file_xds_core_v3_resource_locator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLocator.ProtoReflect.Descriptor instead.
func (*ResourceLocator) Descriptor() ([]byte, []int) {
	return file_xds_core_v3_resource_locator_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceLocator) GetScheme() ResourceLocator_Scheme {
	if x != nil {
		return x.Scheme
	}
	return ResourceLocator_XDSTP
}

func (x *ResourceLocator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceLocator) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ResourceLocator) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (m *ResourceLocator) GetContextParamSpecifier() isResourceLocator_ContextParamSpecifier {
	if m != nil {
		return m.ContextParamSpecifier
	}
	return nil
}

func (x *ResourceLocator) GetExactContext() *ContextParams {
	if x, ok := x.GetContextParamSpecifier().(*ResourceLocator_ExactContext); ok {
		return x.ExactContext
	}
	return nil
}

func (x *ResourceLocator) GetDirectives() []*ResourceLocator_Directive {
	if x != nil {
		return x.Directives
	}
	return nil
}

type isResourceLocator_ContextParamSpecifier interface {
	isResourceLocator_ContextParamSpecifier()
}

type ResourceLocator_ExactContext struct {
	// Additional parameters that can be used to select resource variants.
	// Matches must be exact, i.e. all context parameters must match exactly and
	// there must be no additional context parameters set on the matched
	// resource.
	ExactContext *ContextParams `protobuf:"bytes,5,opt,name=exact_context,json=exactContext,proto3,oneof"`
}

func (*ResourceLocator_ExactContext) isResourceLocator_ContextParamSpecifier() {}

// Directives provide information to data-plane load balancers on how xDS
// resource names are to be interpreted and potentially further resolved. For
// example, they may provide alternative resource locators for when primary
// resolution fails. Directives are not part of resource names and do not
// appear in a xDS transport discovery request.
//
// When encoding to URIs, directives take the form:
//
// <directive name>=<string representation of directive value>
//
// For example, we can have alt=xdstp://foo/bar or entry=some%20thing. Each
// directive value type may have its own string encoding, in the case of
// ResourceLocator there is a recursive URI encoding.
//
// Percent encoding applies to the URI encoding of the directive value.
// Multiple directives are comma-separated, so the reserved characters that
// require percent encoding in a directive value are [',', '#', '[', ']',
// '%']. These are the RFC3986 fragment reserved characters with the addition
// of the xDS scheme specific ','. See
// https://tools.ietf.org/html/rfc3986#page-49 for further details on URI ABNF
// and reserved characters.
type ResourceLocator_Directive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Directive:
	//
	//	*ResourceLocator_Directive_Alt
	//	*ResourceLocator_Directive_Entry
	Directive isResourceLocator_Directive_Directive `protobuf_oneof:"directive"`
}

func (x *ResourceLocator_Directive) Reset() {
	*x = ResourceLocator_Directive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xds_core_v3_resource_locator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLocator_Directive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLocator_Directive) ProtoMessage() {}

func (x *ResourceLocator_Directive) ProtoReflect() protoreflect.Message {
	mi := &file_xds_core_v3_resource_locator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLocator_Directive.ProtoReflect.Descriptor instead.
func (*ResourceLocator_Directive) Descriptor() ([]byte, []int) {
	return file_xds_core_v3_resource_locator_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ResourceLocator_Directive) GetDirective() isResourceLocator_Directive_Directive {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (x *ResourceLocator_Directive) GetAlt() *ResourceLocator {
	if x, ok := x.GetDirective().(*ResourceLocator_Directive_Alt); ok {
		return x.Alt
	}
	return nil
}

func (x *ResourceLocator_Directive) GetEntry() string {
	if x, ok := x.GetDirective().(*ResourceLocator_Directive_Entry); ok {
		return x.Entry
	}
	return ""
}

type isResourceLocator_Directive_Directive interface {
	isResourceLocator_Directive_Directive()
}

type ResourceLocator_Directive_Alt struct {
	// An alternative resource locator for fallback if the resource is
	// unavailable. For example, take the resource locator:
	//
	//   xdstp://foo/some-type/some-route-table#alt=xdstp://bar/some-type/another-route-table
	//
	// If the data-plane load balancer is unable to reach `foo` to fetch the
	// resource, it will fallback to `bar`. Alternative resources do not need
	// to have equivalent content, but they should be functional substitutes.
	Alt *ResourceLocator `protobuf:"bytes,1,opt,name=alt,proto3,oneof"`
}

type ResourceLocator_Directive_Entry struct {
	// List collections support inlining of resources via the entry field in
	// Resource. These inlined Resource objects may have an optional name
	// field specified. When specified, the entry directive allows
	// ResourceLocator to directly reference these inlined resources, e.g.
	// xdstp://.../foo#entry=bar.
	Entry string `protobuf:"bytes,2,opt,name=entry,proto3,oneof"`
}

func (*ResourceLocator_Directive_Alt) isResourceLocator_Directive_Directive() {}

func (*ResourceLocator_Directive_Entry) isResourceLocator_Directive_Directive() {}

var File_xds_core_v3_resource_locator_proto protoreflect.FileDescriptor

var file_xds_core_v3_resource_locator_proto_rawDesc = []byte{
	0x0a, 0x22, 0x78, 0x64, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x78, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x33, 0x1a, 0x1f, 0x78, 0x64, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x78, 0x64, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x04,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x64,
	0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x64,
	0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x1a,
	0x88, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a,
	0x03, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x64, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12,
	0x37, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x01, 0x32, 0x16, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5c, 0x2d, 0x5c, 0x2e, 0x2f, 0x7e, 0x3a, 0x5d, 0x2b, 0x24, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x27, 0x0a, 0x06, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x44, 0x53, 0x54, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x02, 0x42, 0x19, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0xa1,
	0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x33, 0x42, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6e, 0x63, 0x66, 0x2f, 0x78, 0x64, 0x73, 0x2f,
	0x67, 0x6f, 0x2f, 0x78, 0x64, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0xa2, 0x02,
	0x03, 0x58, 0x43, 0x58, 0xaa, 0x02, 0x0b, 0x58, 0x64, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e,
	0x56, 0x33, 0xca, 0x02, 0x0b, 0x58, 0x64, 0x73, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x33,
	0xe2, 0x02, 0x17, 0x58, 0x64, 0x73, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x33, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x58, 0x64, 0x73,
	0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x33, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02,
	0x08, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xds_core_v3_resource_locator_proto_rawDescOnce sync.Once
	file_xds_core_v3_resource_locator_proto_rawDescData = file_xds_core_v3_resource_locator_proto_rawDesc
)

func file_xds_core_v3_resource_locator_proto_rawDescGZIP() []byte {
	file_xds_core_v3_resource_locator_proto_rawDescOnce.Do(func() {
		file_xds_core_v3_resource_locator_proto_rawDescData = protoimpl.X.CompressGZIP(file_xds_core_v3_resource_locator_proto_rawDescData)
	})
	return file_xds_core_v3_resource_locator_proto_rawDescData
}

var file_xds_core_v3_resource_locator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xds_core_v3_resource_locator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_xds_core_v3_resource_locator_proto_goTypes = []interface{}{
	(ResourceLocator_Scheme)(0),       // 0: xds.core.v3.ResourceLocator.Scheme
	(*ResourceLocator)(nil),           // 1: xds.core.v3.ResourceLocator
	(*ResourceLocator_Directive)(nil), // 2: xds.core.v3.ResourceLocator.Directive
	(*ContextParams)(nil),             // 3: xds.core.v3.ContextParams
}
var file_xds_core_v3_resource_locator_proto_depIdxs = []int32{
	0, // 0: xds.core.v3.ResourceLocator.scheme:type_name -> xds.core.v3.ResourceLocator.Scheme
	3, // 1: xds.core.v3.ResourceLocator.exact_context:type_name -> xds.core.v3.ContextParams
	2, // 2: xds.core.v3.ResourceLocator.directives:type_name -> xds.core.v3.ResourceLocator.Directive
	1, // 3: xds.core.v3.ResourceLocator.Directive.alt:type_name -> xds.core.v3.ResourceLocator
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_xds_core_v3_resource_locator_proto_init() }
func file_xds_core_v3_resource_locator_proto_init() {
	if File_xds_core_v3_resource_locator_proto != nil {
		return
	}
	file_xds_core_v3_context_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xds_core_v3_resource_locator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xds_core_v3_resource_locator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLocator_Directive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xds_core_v3_resource_locator_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ResourceLocator_ExactContext)(nil),
	}
	file_xds_core_v3_resource_locator_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ResourceLocator_Directive_Alt)(nil),
		(*ResourceLocator_Directive_Entry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xds_core_v3_resource_locator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xds_core_v3_resource_locator_proto_goTypes,
		DependencyIndexes: file_xds_core_v3_resource_locator_proto_depIdxs,
		EnumInfos:         file_xds_core_v3_resource_locator_proto_enumTypes,
		MessageInfos:      file_xds_core_v3_resource_locator_proto_msgTypes,
	}.Build()
	File_xds_core_v3_resource_locator_proto = out.File
	file_xds_core_v3_resource_locator_proto_rawDesc = nil
	file_xds_core_v3_resource_locator_proto_goTypes = nil
	file_xds_core_v3_resource_locator_proto_depIdxs = nil
}
