syntax = "proto3";

package xds.type.matcher.v3;

import "xds/annotations/v3/status.proto";
import "xds/type/matcher/v3/matcher.proto";

import "validate/validate.proto";

option java_package = "com.github.xds.type.matcher.v3";
option java_outer_classname = "ServerNameMatcherProto";
option java_multiple_files = true;
option go_package = "github.com/cncf/xds/go/xds/type/matcher/v3";

option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Server name matcher]

// Matches a fully qualified server name against a set of possibly overlapping
// wildcard domain names.
message ServerNameMatcher {
  // Specifies an optional list of wildcard domains and a match action. The
  // wildcard symbol ``*`` must appear at most once as the left-most part of
  // the domain.
  //
  // The server name will be matched against all wildcard domains starting from
  // the longest suffix, i.e. ``www.example.com`` input will be first matched
  // against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
  // ``*``. For each wildcard, matching is performed in the order of the
  // declaration. Note that partial wildcards are not supported, and values
  // like ``*w.example.com`` are invalid.
  message DomainMatcher {
    // A non-empty set of wildcard domain names, e.g. ``www.example.com``,
    // ``*.com``, or ``*``.
    repeated string domains = 1 [ (validate.rules).repeated = {min_items : 1} ];

    // Match action to apply when the server name matches any of the wildcard
    // domain names.
    Matcher.OnMatch on_match = 2;
  }

  // Match a server name by multiple wildcard domain matchers. If there are
  // multiple wildcards matching the server name, the order of declaration is
  // used to select the first match.
  repeated DomainMatcher domain_matchers = 1;
}
