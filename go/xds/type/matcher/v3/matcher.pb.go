// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xds/type/matcher/v3/matcher.proto

package xds_type_matcher_v3

import (
	fmt "fmt"
	_ "github.com/cncf/xds/go/udpa/annotations"
	v3 "github.com/cncf/xds/go/xds/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Matcher struct {
	// Types that are valid to be assigned to MatcherType:
	//	*Matcher_MatcherList_
	//	*Matcher_MatcherTree_
	MatcherType          isMatcher_MatcherType `protobuf_oneof:"matcher_type"`
	OnNoMatch            *Matcher_OnMatch      `protobuf:"bytes,3,opt,name=on_no_match,json=onNoMatch,proto3" json:"on_no_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Matcher) Reset()         { *m = Matcher{} }
func (m *Matcher) String() string { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()    {}
func (*Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0}
}

func (m *Matcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher.Unmarshal(m, b)
}
func (m *Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher.Marshal(b, m, deterministic)
}
func (m *Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher.Merge(m, src)
}
func (m *Matcher) XXX_Size() int {
	return xxx_messageInfo_Matcher.Size(m)
}
func (m *Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher proto.InternalMessageInfo

type isMatcher_MatcherType interface {
	isMatcher_MatcherType()
}

type Matcher_MatcherList_ struct {
	MatcherList *Matcher_MatcherList `protobuf:"bytes,1,opt,name=matcher_list,json=matcherList,proto3,oneof"`
}

type Matcher_MatcherTree_ struct {
	MatcherTree *Matcher_MatcherTree `protobuf:"bytes,2,opt,name=matcher_tree,json=matcherTree,proto3,oneof"`
}

func (*Matcher_MatcherList_) isMatcher_MatcherType() {}

func (*Matcher_MatcherTree_) isMatcher_MatcherType() {}

func (m *Matcher) GetMatcherType() isMatcher_MatcherType {
	if m != nil {
		return m.MatcherType
	}
	return nil
}

func (m *Matcher) GetMatcherList() *Matcher_MatcherList {
	if x, ok := m.GetMatcherType().(*Matcher_MatcherList_); ok {
		return x.MatcherList
	}
	return nil
}

func (m *Matcher) GetMatcherTree() *Matcher_MatcherTree {
	if x, ok := m.GetMatcherType().(*Matcher_MatcherTree_); ok {
		return x.MatcherTree
	}
	return nil
}

func (m *Matcher) GetOnNoMatch() *Matcher_OnMatch {
	if m != nil {
		return m.OnNoMatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Matcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Matcher_MatcherList_)(nil),
		(*Matcher_MatcherTree_)(nil),
	}
}

type Matcher_OnMatch struct {
	// Types that are valid to be assigned to OnMatch:
	//	*Matcher_OnMatch_Matcher
	//	*Matcher_OnMatch_Action
	OnMatch              isMatcher_OnMatch_OnMatch `protobuf_oneof:"on_match"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Matcher_OnMatch) Reset()         { *m = Matcher_OnMatch{} }
func (m *Matcher_OnMatch) String() string { return proto.CompactTextString(m) }
func (*Matcher_OnMatch) ProtoMessage()    {}
func (*Matcher_OnMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 0}
}

func (m *Matcher_OnMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_OnMatch.Unmarshal(m, b)
}
func (m *Matcher_OnMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_OnMatch.Marshal(b, m, deterministic)
}
func (m *Matcher_OnMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_OnMatch.Merge(m, src)
}
func (m *Matcher_OnMatch) XXX_Size() int {
	return xxx_messageInfo_Matcher_OnMatch.Size(m)
}
func (m *Matcher_OnMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_OnMatch.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_OnMatch proto.InternalMessageInfo

type isMatcher_OnMatch_OnMatch interface {
	isMatcher_OnMatch_OnMatch()
}

type Matcher_OnMatch_Matcher struct {
	Matcher *Matcher `protobuf:"bytes,1,opt,name=matcher,proto3,oneof"`
}

type Matcher_OnMatch_Action struct {
	Action *v3.TypedExtensionConfig `protobuf:"bytes,2,opt,name=action,proto3,oneof"`
}

func (*Matcher_OnMatch_Matcher) isMatcher_OnMatch_OnMatch() {}

func (*Matcher_OnMatch_Action) isMatcher_OnMatch_OnMatch() {}

func (m *Matcher_OnMatch) GetOnMatch() isMatcher_OnMatch_OnMatch {
	if m != nil {
		return m.OnMatch
	}
	return nil
}

func (m *Matcher_OnMatch) GetMatcher() *Matcher {
	if x, ok := m.GetOnMatch().(*Matcher_OnMatch_Matcher); ok {
		return x.Matcher
	}
	return nil
}

func (m *Matcher_OnMatch) GetAction() *v3.TypedExtensionConfig {
	if x, ok := m.GetOnMatch().(*Matcher_OnMatch_Action); ok {
		return x.Action
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Matcher_OnMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Matcher_OnMatch_Matcher)(nil),
		(*Matcher_OnMatch_Action)(nil),
	}
}

type Matcher_MatcherList struct {
	Matchers             []*Matcher_MatcherList_FieldMatcher `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *Matcher_MatcherList) Reset()         { *m = Matcher_MatcherList{} }
func (m *Matcher_MatcherList) String() string { return proto.CompactTextString(m) }
func (*Matcher_MatcherList) ProtoMessage()    {}
func (*Matcher_MatcherList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 1}
}

func (m *Matcher_MatcherList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherList.Unmarshal(m, b)
}
func (m *Matcher_MatcherList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherList.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherList.Merge(m, src)
}
func (m *Matcher_MatcherList) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherList.Size(m)
}
func (m *Matcher_MatcherList) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherList.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherList proto.InternalMessageInfo

func (m *Matcher_MatcherList) GetMatchers() []*Matcher_MatcherList_FieldMatcher {
	if m != nil {
		return m.Matchers
	}
	return nil
}

type Matcher_MatcherList_Predicate struct {
	// Types that are valid to be assigned to MatchType:
	//	*Matcher_MatcherList_Predicate_SinglePredicate_
	//	*Matcher_MatcherList_Predicate_OrMatcher
	//	*Matcher_MatcherList_Predicate_AndMatcher
	//	*Matcher_MatcherList_Predicate_NotMatcher
	MatchType            isMatcher_MatcherList_Predicate_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *Matcher_MatcherList_Predicate) Reset()         { *m = Matcher_MatcherList_Predicate{} }
func (m *Matcher_MatcherList_Predicate) String() string { return proto.CompactTextString(m) }
func (*Matcher_MatcherList_Predicate) ProtoMessage()    {}
func (*Matcher_MatcherList_Predicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 1, 0}
}

func (m *Matcher_MatcherList_Predicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherList_Predicate.Unmarshal(m, b)
}
func (m *Matcher_MatcherList_Predicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherList_Predicate.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherList_Predicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherList_Predicate.Merge(m, src)
}
func (m *Matcher_MatcherList_Predicate) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherList_Predicate.Size(m)
}
func (m *Matcher_MatcherList_Predicate) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherList_Predicate.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherList_Predicate proto.InternalMessageInfo

type isMatcher_MatcherList_Predicate_MatchType interface {
	isMatcher_MatcherList_Predicate_MatchType()
}

type Matcher_MatcherList_Predicate_SinglePredicate_ struct {
	SinglePredicate *Matcher_MatcherList_Predicate_SinglePredicate `protobuf:"bytes,1,opt,name=single_predicate,json=singlePredicate,proto3,oneof"`
}

type Matcher_MatcherList_Predicate_OrMatcher struct {
	OrMatcher *Matcher_MatcherList_Predicate_PredicateList `protobuf:"bytes,2,opt,name=or_matcher,json=orMatcher,proto3,oneof"`
}

type Matcher_MatcherList_Predicate_AndMatcher struct {
	AndMatcher *Matcher_MatcherList_Predicate_PredicateList `protobuf:"bytes,3,opt,name=and_matcher,json=andMatcher,proto3,oneof"`
}

type Matcher_MatcherList_Predicate_NotMatcher struct {
	NotMatcher *Matcher_MatcherList_Predicate `protobuf:"bytes,4,opt,name=not_matcher,json=notMatcher,proto3,oneof"`
}

func (*Matcher_MatcherList_Predicate_SinglePredicate_) isMatcher_MatcherList_Predicate_MatchType() {}

func (*Matcher_MatcherList_Predicate_OrMatcher) isMatcher_MatcherList_Predicate_MatchType() {}

func (*Matcher_MatcherList_Predicate_AndMatcher) isMatcher_MatcherList_Predicate_MatchType() {}

func (*Matcher_MatcherList_Predicate_NotMatcher) isMatcher_MatcherList_Predicate_MatchType() {}

func (m *Matcher_MatcherList_Predicate) GetMatchType() isMatcher_MatcherList_Predicate_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *Matcher_MatcherList_Predicate) GetSinglePredicate() *Matcher_MatcherList_Predicate_SinglePredicate {
	if x, ok := m.GetMatchType().(*Matcher_MatcherList_Predicate_SinglePredicate_); ok {
		return x.SinglePredicate
	}
	return nil
}

func (m *Matcher_MatcherList_Predicate) GetOrMatcher() *Matcher_MatcherList_Predicate_PredicateList {
	if x, ok := m.GetMatchType().(*Matcher_MatcherList_Predicate_OrMatcher); ok {
		return x.OrMatcher
	}
	return nil
}

func (m *Matcher_MatcherList_Predicate) GetAndMatcher() *Matcher_MatcherList_Predicate_PredicateList {
	if x, ok := m.GetMatchType().(*Matcher_MatcherList_Predicate_AndMatcher); ok {
		return x.AndMatcher
	}
	return nil
}

func (m *Matcher_MatcherList_Predicate) GetNotMatcher() *Matcher_MatcherList_Predicate {
	if x, ok := m.GetMatchType().(*Matcher_MatcherList_Predicate_NotMatcher); ok {
		return x.NotMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Matcher_MatcherList_Predicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Matcher_MatcherList_Predicate_SinglePredicate_)(nil),
		(*Matcher_MatcherList_Predicate_OrMatcher)(nil),
		(*Matcher_MatcherList_Predicate_AndMatcher)(nil),
		(*Matcher_MatcherList_Predicate_NotMatcher)(nil),
	}
}

type Matcher_MatcherList_Predicate_SinglePredicate struct {
	Input *v3.TypedExtensionConfig `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Types that are valid to be assigned to Matcher:
	//	*Matcher_MatcherList_Predicate_SinglePredicate_ValueMatch
	//	*Matcher_MatcherList_Predicate_SinglePredicate_CustomMatch
	Matcher              isMatcher_MatcherList_Predicate_SinglePredicate_Matcher `protobuf_oneof:"matcher"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *Matcher_MatcherList_Predicate_SinglePredicate) Reset() {
	*m = Matcher_MatcherList_Predicate_SinglePredicate{}
}
func (m *Matcher_MatcherList_Predicate_SinglePredicate) String() string {
	return proto.CompactTextString(m)
}
func (*Matcher_MatcherList_Predicate_SinglePredicate) ProtoMessage() {}
func (*Matcher_MatcherList_Predicate_SinglePredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 1, 0, 0}
}

func (m *Matcher_MatcherList_Predicate_SinglePredicate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherList_Predicate_SinglePredicate.Unmarshal(m, b)
}
func (m *Matcher_MatcherList_Predicate_SinglePredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherList_Predicate_SinglePredicate.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherList_Predicate_SinglePredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherList_Predicate_SinglePredicate.Merge(m, src)
}
func (m *Matcher_MatcherList_Predicate_SinglePredicate) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherList_Predicate_SinglePredicate.Size(m)
}
func (m *Matcher_MatcherList_Predicate_SinglePredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherList_Predicate_SinglePredicate.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherList_Predicate_SinglePredicate proto.InternalMessageInfo

func (m *Matcher_MatcherList_Predicate_SinglePredicate) GetInput() *v3.TypedExtensionConfig {
	if m != nil {
		return m.Input
	}
	return nil
}

type isMatcher_MatcherList_Predicate_SinglePredicate_Matcher interface {
	isMatcher_MatcherList_Predicate_SinglePredicate_Matcher()
}

type Matcher_MatcherList_Predicate_SinglePredicate_ValueMatch struct {
	ValueMatch *StringMatcher `protobuf:"bytes,2,opt,name=value_match,json=valueMatch,proto3,oneof"`
}

type Matcher_MatcherList_Predicate_SinglePredicate_CustomMatch struct {
	CustomMatch *v3.TypedExtensionConfig `protobuf:"bytes,3,opt,name=custom_match,json=customMatch,proto3,oneof"`
}

func (*Matcher_MatcherList_Predicate_SinglePredicate_ValueMatch) isMatcher_MatcherList_Predicate_SinglePredicate_Matcher() {
}

func (*Matcher_MatcherList_Predicate_SinglePredicate_CustomMatch) isMatcher_MatcherList_Predicate_SinglePredicate_Matcher() {
}

func (m *Matcher_MatcherList_Predicate_SinglePredicate) GetMatcher() isMatcher_MatcherList_Predicate_SinglePredicate_Matcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}

func (m *Matcher_MatcherList_Predicate_SinglePredicate) GetValueMatch() *StringMatcher {
	if x, ok := m.GetMatcher().(*Matcher_MatcherList_Predicate_SinglePredicate_ValueMatch); ok {
		return x.ValueMatch
	}
	return nil
}

func (m *Matcher_MatcherList_Predicate_SinglePredicate) GetCustomMatch() *v3.TypedExtensionConfig {
	if x, ok := m.GetMatcher().(*Matcher_MatcherList_Predicate_SinglePredicate_CustomMatch); ok {
		return x.CustomMatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Matcher_MatcherList_Predicate_SinglePredicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Matcher_MatcherList_Predicate_SinglePredicate_ValueMatch)(nil),
		(*Matcher_MatcherList_Predicate_SinglePredicate_CustomMatch)(nil),
	}
}

type Matcher_MatcherList_Predicate_PredicateList struct {
	Predicate            []*Matcher_MatcherList_Predicate `protobuf:"bytes,1,rep,name=predicate,proto3" json:"predicate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Matcher_MatcherList_Predicate_PredicateList) Reset() {
	*m = Matcher_MatcherList_Predicate_PredicateList{}
}
func (m *Matcher_MatcherList_Predicate_PredicateList) String() string {
	return proto.CompactTextString(m)
}
func (*Matcher_MatcherList_Predicate_PredicateList) ProtoMessage() {}
func (*Matcher_MatcherList_Predicate_PredicateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 1, 0, 1}
}

func (m *Matcher_MatcherList_Predicate_PredicateList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherList_Predicate_PredicateList.Unmarshal(m, b)
}
func (m *Matcher_MatcherList_Predicate_PredicateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherList_Predicate_PredicateList.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherList_Predicate_PredicateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherList_Predicate_PredicateList.Merge(m, src)
}
func (m *Matcher_MatcherList_Predicate_PredicateList) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherList_Predicate_PredicateList.Size(m)
}
func (m *Matcher_MatcherList_Predicate_PredicateList) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherList_Predicate_PredicateList.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherList_Predicate_PredicateList proto.InternalMessageInfo

func (m *Matcher_MatcherList_Predicate_PredicateList) GetPredicate() []*Matcher_MatcherList_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

type Matcher_MatcherList_FieldMatcher struct {
	Predicate            *Matcher_MatcherList_Predicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	OnMatch              *Matcher_OnMatch               `protobuf:"bytes,2,opt,name=on_match,json=onMatch,proto3" json:"on_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Matcher_MatcherList_FieldMatcher) Reset()         { *m = Matcher_MatcherList_FieldMatcher{} }
func (m *Matcher_MatcherList_FieldMatcher) String() string { return proto.CompactTextString(m) }
func (*Matcher_MatcherList_FieldMatcher) ProtoMessage()    {}
func (*Matcher_MatcherList_FieldMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 1, 1}
}

func (m *Matcher_MatcherList_FieldMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherList_FieldMatcher.Unmarshal(m, b)
}
func (m *Matcher_MatcherList_FieldMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherList_FieldMatcher.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherList_FieldMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherList_FieldMatcher.Merge(m, src)
}
func (m *Matcher_MatcherList_FieldMatcher) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherList_FieldMatcher.Size(m)
}
func (m *Matcher_MatcherList_FieldMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherList_FieldMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherList_FieldMatcher proto.InternalMessageInfo

func (m *Matcher_MatcherList_FieldMatcher) GetPredicate() *Matcher_MatcherList_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (m *Matcher_MatcherList_FieldMatcher) GetOnMatch() *Matcher_OnMatch {
	if m != nil {
		return m.OnMatch
	}
	return nil
}

type Matcher_MatcherTree struct {
	Input *v3.TypedExtensionConfig `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Types that are valid to be assigned to TreeType:
	//	*Matcher_MatcherTree_ExactMatchMap
	//	*Matcher_MatcherTree_PrefixMatchMap
	//	*Matcher_MatcherTree_CustomMatch
	TreeType             isMatcher_MatcherTree_TreeType `protobuf_oneof:"tree_type"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Matcher_MatcherTree) Reset()         { *m = Matcher_MatcherTree{} }
func (m *Matcher_MatcherTree) String() string { return proto.CompactTextString(m) }
func (*Matcher_MatcherTree) ProtoMessage()    {}
func (*Matcher_MatcherTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 2}
}

func (m *Matcher_MatcherTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherTree.Unmarshal(m, b)
}
func (m *Matcher_MatcherTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherTree.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherTree.Merge(m, src)
}
func (m *Matcher_MatcherTree) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherTree.Size(m)
}
func (m *Matcher_MatcherTree) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherTree.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherTree proto.InternalMessageInfo

func (m *Matcher_MatcherTree) GetInput() *v3.TypedExtensionConfig {
	if m != nil {
		return m.Input
	}
	return nil
}

type isMatcher_MatcherTree_TreeType interface {
	isMatcher_MatcherTree_TreeType()
}

type Matcher_MatcherTree_ExactMatchMap struct {
	ExactMatchMap *Matcher_MatcherTree_MatchMap `protobuf:"bytes,2,opt,name=exact_match_map,json=exactMatchMap,proto3,oneof"`
}

type Matcher_MatcherTree_PrefixMatchMap struct {
	PrefixMatchMap *Matcher_MatcherTree_MatchMap `protobuf:"bytes,3,opt,name=prefix_match_map,json=prefixMatchMap,proto3,oneof"`
}

type Matcher_MatcherTree_CustomMatch struct {
	CustomMatch *v3.TypedExtensionConfig `protobuf:"bytes,4,opt,name=custom_match,json=customMatch,proto3,oneof"`
}

func (*Matcher_MatcherTree_ExactMatchMap) isMatcher_MatcherTree_TreeType() {}

func (*Matcher_MatcherTree_PrefixMatchMap) isMatcher_MatcherTree_TreeType() {}

func (*Matcher_MatcherTree_CustomMatch) isMatcher_MatcherTree_TreeType() {}

func (m *Matcher_MatcherTree) GetTreeType() isMatcher_MatcherTree_TreeType {
	if m != nil {
		return m.TreeType
	}
	return nil
}

func (m *Matcher_MatcherTree) GetExactMatchMap() *Matcher_MatcherTree_MatchMap {
	if x, ok := m.GetTreeType().(*Matcher_MatcherTree_ExactMatchMap); ok {
		return x.ExactMatchMap
	}
	return nil
}

func (m *Matcher_MatcherTree) GetPrefixMatchMap() *Matcher_MatcherTree_MatchMap {
	if x, ok := m.GetTreeType().(*Matcher_MatcherTree_PrefixMatchMap); ok {
		return x.PrefixMatchMap
	}
	return nil
}

func (m *Matcher_MatcherTree) GetCustomMatch() *v3.TypedExtensionConfig {
	if x, ok := m.GetTreeType().(*Matcher_MatcherTree_CustomMatch); ok {
		return x.CustomMatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Matcher_MatcherTree) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Matcher_MatcherTree_ExactMatchMap)(nil),
		(*Matcher_MatcherTree_PrefixMatchMap)(nil),
		(*Matcher_MatcherTree_CustomMatch)(nil),
	}
}

type Matcher_MatcherTree_MatchMap struct {
	Map                  map[string]*Matcher_OnMatch `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Matcher_MatcherTree_MatchMap) Reset()         { *m = Matcher_MatcherTree_MatchMap{} }
func (m *Matcher_MatcherTree_MatchMap) String() string { return proto.CompactTextString(m) }
func (*Matcher_MatcherTree_MatchMap) ProtoMessage()    {}
func (*Matcher_MatcherTree_MatchMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5da8e5cb90406c53, []int{0, 2, 0}
}

func (m *Matcher_MatcherTree_MatchMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Matcher_MatcherTree_MatchMap.Unmarshal(m, b)
}
func (m *Matcher_MatcherTree_MatchMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Matcher_MatcherTree_MatchMap.Marshal(b, m, deterministic)
}
func (m *Matcher_MatcherTree_MatchMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matcher_MatcherTree_MatchMap.Merge(m, src)
}
func (m *Matcher_MatcherTree_MatchMap) XXX_Size() int {
	return xxx_messageInfo_Matcher_MatcherTree_MatchMap.Size(m)
}
func (m *Matcher_MatcherTree_MatchMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Matcher_MatcherTree_MatchMap.DiscardUnknown(m)
}

var xxx_messageInfo_Matcher_MatcherTree_MatchMap proto.InternalMessageInfo

func (m *Matcher_MatcherTree_MatchMap) GetMap() map[string]*Matcher_OnMatch {
	if m != nil {
		return m.Map
	}
	return nil
}

func init() {
	proto.RegisterType((*Matcher)(nil), "xds.type.matcher.v3.Matcher")
	proto.RegisterType((*Matcher_OnMatch)(nil), "xds.type.matcher.v3.Matcher.OnMatch")
	proto.RegisterType((*Matcher_MatcherList)(nil), "xds.type.matcher.v3.Matcher.MatcherList")
	proto.RegisterType((*Matcher_MatcherList_Predicate)(nil), "xds.type.matcher.v3.Matcher.MatcherList.Predicate")
	proto.RegisterType((*Matcher_MatcherList_Predicate_SinglePredicate)(nil), "xds.type.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate")
	proto.RegisterType((*Matcher_MatcherList_Predicate_PredicateList)(nil), "xds.type.matcher.v3.Matcher.MatcherList.Predicate.PredicateList")
	proto.RegisterType((*Matcher_MatcherList_FieldMatcher)(nil), "xds.type.matcher.v3.Matcher.MatcherList.FieldMatcher")
	proto.RegisterType((*Matcher_MatcherTree)(nil), "xds.type.matcher.v3.Matcher.MatcherTree")
	proto.RegisterType((*Matcher_MatcherTree_MatchMap)(nil), "xds.type.matcher.v3.Matcher.MatcherTree.MatchMap")
	proto.RegisterMapType((map[string]*Matcher_OnMatch)(nil), "xds.type.matcher.v3.Matcher.MatcherTree.MatchMap.MapEntry")
}

func init() { proto.RegisterFile("xds/type/matcher/v3/matcher.proto", fileDescriptor_5da8e5cb90406c53) }

var fileDescriptor_5da8e5cb90406c53 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0xd6, 0x89, 0xb6, 0x44, 0x3d, 0xca, 0x96, 0x7a, 0x1e, 0x2a, 0xb0, 0x3f, 0x60, 0x1b, 0x1d,
	0x3c, 0x51, 0xad, 0x8d, 0x02, 0x86, 0xba, 0xb4, 0x6c, 0x6d, 0xa8, 0x40, 0xd5, 0x1a, 0xb4, 0xdb,
	0xa1, 0x6e, 0x21, 0x9c, 0xc9, 0xb3, 0x4c, 0x58, 0xba, 0x23, 0xc8, 0x93, 0x20, 0x6d, 0x5d, 0xba,
	0x74, 0x73, 0xc7, 0xfc, 0x07, 0xf9, 0x03, 0x92, 0x21, 0x53, 0xc6, 0xac, 0xf9, 0x5b, 0xb2, 0x04,
	0x99, 0x02, 0xde, 0x1d, 0x29, 0xda, 0x10, 0x1c, 0x59, 0xf1, 0xa4, 0xc7, 0x77, 0xfc, 0xbe, 0xef,
	0xee, 0xbd, 0xef, 0x9d, 0x08, 0x3b, 0xd3, 0x20, 0x69, 0x8b, 0x59, 0x44, 0xdb, 0x23, 0x22, 0xfc,
	0x2b, 0x1a, 0xb7, 0x27, 0x07, 0x59, 0xe8, 0x44, 0x31, 0x17, 0x1c, 0x6f, 0x4d, 0x83, 0xc4, 0x49,
	0x5f, 0x71, 0xb2, 0xfc, 0xe4, 0xc0, 0xfe, 0x62, 0x1c, 0x44, 0xa4, 0x4d, 0x18, 0xe3, 0x82, 0x88,
	0x90, 0xb3, 0xa4, 0x9d, 0x08, 0x22, 0xc6, 0x89, 0xc2, 0xd8, 0x9f, 0xa5, 0xb4, 0x3e, 0x8f, 0x69,
	0x4a, 0x47, 0xa7, 0x82, 0xb2, 0x24, 0xe4, 0x4c, 0x2f, 0x6e, 0x2f, 0xd2, 0x4c, 0x44, 0x1c, 0xb2,
	0x81, 0x7e, 0xe3, 0xd3, 0x09, 0x19, 0x86, 0x01, 0x11, 0xb4, 0x9d, 0x05, 0x6a, 0x61, 0xf7, 0xdf,
	0x26, 0x54, 0x7b, 0x0a, 0x84, 0x7b, 0x50, 0xd7, 0xf8, 0xfe, 0x30, 0x4c, 0x44, 0x0b, 0x6d, 0xa3,
	0x3d, 0x6b, 0x7f, 0xcf, 0x59, 0xb0, 0x5d, 0x47, 0x63, 0xb2, 0xdf, 0x5f, 0xc2, 0x44, 0x74, 0x4b,
	0x9e, 0x35, 0x9a, 0x3f, 0x16, 0xe9, 0x44, 0x4c, 0x69, 0xab, 0xbc, 0x3c, 0xdd, 0x59, 0x4c, 0x69,
	0x81, 0x2e, 0x7d, 0xc4, 0x3f, 0x81, 0xc5, 0x59, 0x9f, 0xf1, 0xbe, 0x4c, 0xb6, 0x0c, 0xc9, 0xf6,
	0xd5, 0xbd, 0x6c, 0xbf, 0x31, 0x19, 0x79, 0x35, 0xce, 0x7e, 0xe5, 0x32, 0xb4, 0x6f, 0x10, 0x54,
	0x75, 0x1a, 0x1f, 0x42, 0x55, 0x83, 0xf4, 0x51, 0x3f, 0xbf, 0x8f, 0xad, 0x5b, 0xf2, 0xb2, 0xd7,
	0xf1, 0x77, 0x50, 0x21, 0x7e, 0xda, 0x25, 0x7d, 0xa8, 0x1d, 0x09, 0x4c, 0xdb, 0x93, 0x02, 0xce,
	0x66, 0x11, 0x0d, 0x8e, 0xb2, 0x1e, 0xfd, 0xc8, 0xd9, 0x65, 0x38, 0xe8, 0x96, 0x3c, 0x0d, 0x71,
	0x1b, 0x60, 0x72, 0xa6, 0x4e, 0x81, 0x8d, 0xb7, 0x2e, 0xb2, 0x9f, 0x9b, 0x60, 0x15, 0xea, 0x88,
	0xcf, 0xc1, 0xd4, 0x42, 0x49, 0x0b, 0x6d, 0x1b, 0x7b, 0xd6, 0xfe, 0xb7, 0xcb, 0xf6, 0xc0, 0x39,
	0x0e, 0xe9, 0x30, 0xd0, 0x09, 0xd7, 0x7c, 0xe7, 0xae, 0xff, 0x8f, 0xca, 0x26, 0xf2, 0x72, 0x42,
	0xfb, 0xa6, 0x02, 0xb5, 0x93, 0x98, 0x06, 0xa1, 0x4f, 0x04, 0xc5, 0x1c, 0x9a, 0x49, 0xc8, 0x06,
	0x43, 0xda, 0x8f, 0xb2, 0x9c, 0xae, 0x85, 0xbb, 0xb4, 0x64, 0xce, 0xe6, 0x9c, 0x4a, 0xaa, 0xfc,
	0xb9, 0x5b, 0xf2, 0x1a, 0xc9, 0xed, 0x14, 0x26, 0x00, 0x3c, 0xee, 0x67, 0x65, 0x57, 0xd5, 0xfb,
	0x7e, 0x05, 0xa9, 0x3c, 0xd2, 0xce, 0xab, 0xf1, 0x38, 0xb3, 0xb1, 0x0f, 0x16, 0x61, 0x41, 0xae,
	0x61, 0x3c, 0x9a, 0x06, 0x10, 0x96, 0x95, 0x16, 0xff, 0x0e, 0x16, 0xe3, 0x22, 0x17, 0x59, 0x93,
	0x22, 0xfb, 0x0f, 0x17, 0x49, 0x69, 0x19, 0x17, 0x7a, 0xcd, 0x7e, 0x83, 0xa0, 0x71, 0xa7, 0x8a,
	0xf8, 0x07, 0x58, 0x0f, 0x59, 0x34, 0xce, 0xe6, 0xf1, 0xc3, 0x5e, 0x93, 0x7d, 0xff, 0x0f, 0x95,
	0x9b, 0xc8, 0x53, 0x48, 0x7c, 0x04, 0xd6, 0x84, 0x0c, 0xc7, 0x54, 0xcf, 0x8e, 0x2a, 0xfb, 0xee,
	0xc2, 0xdd, 0x9e, 0xca, 0x6b, 0x63, 0xee, 0x79, 0x90, 0x40, 0x35, 0x30, 0xc7, 0x50, 0xf7, 0xc7,
	0x89, 0xe0, 0xa3, 0x5b, 0x33, 0xb8, 0x94, 0xf9, 0x2d, 0x05, 0x94, 0x3c, 0xee, 0x66, 0x3e, 0x78,
	0x6a, 0x00, 0xae, 0x61, 0xe3, 0x56, 0xad, 0xf1, 0x9f, 0x50, 0x2b, 0xfa, 0xd1, 0x58, 0xad, 0xb6,
	0xb9, 0xff, 0xcb, 0xde, 0x9c, 0xce, 0xfd, 0x04, 0x40, 0x12, 0xf4, 0x53, 0x2e, 0xa5, 0xff, 0x0c,
	0x41, 0xbd, 0x38, 0x38, 0x77, 0xf5, 0xd1, 0x47, 0xe8, 0xab, 0x3e, 0xcc, 0xe9, 0xf0, 0xcf, 0xf3,
	0xf1, 0xd7, 0x8d, 0x58, 0xea, 0x12, 0x2b, 0x90, 0x55, 0xb9, 0x4a, 0xd9, 0x4f, 0xd7, 0xf2, 0x8b,
	0x43, 0x5e, 0x91, 0x8f, 0xe0, 0x94, 0x73, 0x68, 0xd0, 0x29, 0xf1, 0xb5, 0xb3, 0xfb, 0x23, 0x12,
	0xe9, 0x4d, 0x7e, 0xb3, 0xec, 0xbd, 0xad, 0xe2, 0x1e, 0x89, 0xba, 0x25, 0x6f, 0x43, 0x72, 0x65,
	0x09, 0xfc, 0x37, 0x34, 0xa3, 0x98, 0x5e, 0x86, 0xd3, 0x02, 0xbb, 0xb1, 0x3a, 0xfb, 0xa6, 0x22,
	0xcb, 0xe9, 0xef, 0xda, 0x73, 0x6d, 0x35, 0x7b, 0xda, 0x2f, 0x11, 0x98, 0x39, 0xe9, 0x1f, 0x60,
	0xa4, 0xdb, 0x54, 0x26, 0xec, 0x3c, 0x78, 0x9b, 0x4e, 0x8f, 0x44, 0x47, 0x4c, 0xc4, 0x33, 0x59,
	0xea, 0x27, 0xf2, 0x32, 0x4e, 0x09, 0xed, 0xbf, 0x52, 0x0d, 0xb5, 0x84, 0x9b, 0x60, 0x5c, 0xd3,
	0x99, 0xec, 0x5a, 0xcd, 0x4b, 0x43, 0xdc, 0x81, 0x75, 0x39, 0x77, 0x0f, 0x71, 0x88, 0xa7, 0x20,
	0x9d, 0xf2, 0x21, 0x72, 0x9b, 0x50, 0x4b, 0xff, 0x73, 0xe7, 0x1e, 0xef, 0x98, 0x2f, 0xfe, 0x79,
	0xf5, 0xba, 0x52, 0x36, 0x91, 0xbb, 0x55, 0xf8, 0x5f, 0xce, 0x96, 0xdd, 0xaf, 0xe1, 0x4b, 0x9f,
	0x8f, 0x9c, 0x41, 0x28, 0xae, 0xc6, 0x17, 0x8b, 0xd4, 0xdc, 0xba, 0x96, 0x3b, 0x49, 0xbf, 0x1b,
	0x4e, 0xd0, 0x45, 0x45, 0x7e, 0x40, 0x1c, 0xbc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xa0, 0x14,
	0x5d, 0xf1, 0x08, 0x00, 0x00,
}
