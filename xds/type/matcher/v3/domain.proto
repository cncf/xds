syntax = "proto3";

package xds.type.matcher.v3;

import "xds/annotations/v3/status.proto";
import "xds/type/matcher/v3/matcher.proto";

import "validate/validate.proto";

option java_package = "com.github.xds.type.matcher.v3";
option java_outer_classname = "ServerNameMatcherProto";
option java_multiple_files = true;
option go_package = "github.com/cncf/xds/go/xds/type/matcher/v3";

option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Server name matcher]

// Matches a fully qualified server name against a set of possibly overlapping
// wildcard domain names.
message ServerNameMatcher {
  // Specifies an optional list of wildcard domains and a match action.
  //
  // The server name will be matched against all wildcard domains starting from
  // the longest suffix, i.e. ``www.example.com`` will be first matched against
  // ``www.example.com``, then ``*.example.com``, then ``*.com``. Note that
  // partial wildcards are not supported, and values like ``*w.example.com``
  // are invalid.
  message DomainMatcher {
    // A non-empty set of wildcard domain names, e.g. ``www.example.com`` or
    // ``*.com``.
    repeated string domains = 1 [ (validate.rules).repeated = {min_items : 1} ];

    // Match action to apply when the server name matches any of the wildcard
    // domain names.
    Matcher.OnMatch on_match = 2;

    // Indicates whether this match option should be considered when there is a
    // more specific match. Exclusive matches are not selected whenever a more
    // specific matcher applies even when the more specific matcher fails to
    // match its nested match conditions. For example, an exclusive matcher for
    // ``*.com`` never matches ``www.example.com`` if there is a matcher for
    // the domain ``*.example.com``. Matchers are selected in the order of
    // their specificity first (longest common suffix), then the order of
    // declaration second.
    bool exclusive = 3;
  }

  // Match a server name by multiple wildcard domain matchers.
  repeated DomainMatcher domain_matchers = 1;
}
